#now they are arbitrary values
CORRELATION_THRESHOLD = 50
GAUSSIAN_MEAN = 30
GAUSSIAN_STDEV = 3

from CommonDataTypes import *
from scipy import signal
import numpy as np
import PeakDetection

class CandidateSelector:
    """
    Selects Candidates for later detection using correlation-
    for each point in the tomogram, try all the different templates and tilts, assign a max_correlation to each point.
    apply a blurring transformation to the max_correlation image (to unite close peaks), and then search for peaks
    """
    def __init__(self, templates):
        self.templates = templates
        self.kernel = np.outer(signal.gaussian(GAUSSIAN_MEAN, GAUSSIAN_STDEV), signal.gaussian(GAUSSIAN_MEAN, GAUSSIAN_STDEV))
        #these are for debug
        self.max_correlation_per_3loc = None
        self.blurred_correlation_array = None
        self.positions = None

    def find_local_maxima(self, correlation_array):
        self.blurred_correlation_array = signal.fftconvolve(correlation_array[:,:,0], self.kernel, mode='same')
        res = np.nonzero(PeakDetection.detect_peaks(self.blurred_correlation_array)) #### 2D
        return [(x[0], x[1], 0) for x in zip(res[0], res[1]) if
                          self.blurred_correlation_array[x] > CORRELATION_THRESHOLD]


    def select(self, tomogram):
        """
        Find candidates for the template positions using max correlation.
        :param tomogram: The tomogram to search in
        :param debug: If this is set to True, return is a tuple of (orig_return, (correlation_dm, blurred_correlation dm) )
        :return: a list of candidates
        """
        self.max_correlation_per_3loc = np.empty(tomogram.density_map.shape)
        for template_tuple in self.templates:
            for tilted in template_tuple:
                #max_correlation_per_3loc is an array representing the maximum on all correlations generated by all the templates and tilts for each 3-position
                self.max_correlation_per_3loc = np.maximum(self.max_correlation_per_3loc, signal.fftconvolve(tomogram.density_map, tilted.density_map, mode='same'))

        self.positions = self.find_local_maxima(self.max_correlation_per_3loc)
        return [Candidate(SixPosition(position, None), None) for position in self.positions]



if __name__ == '__main__':

    from TemplateGenerator import generate_tilted_templates
    from TomogramGenerator import generate_tomogram
    import matplotlib.pyplot as plt

    templates = generate_tilted_templates()
    tomogram = generate_tomogram(templates, None)

    fig, ax = plt.subplots()
    ax.imshow(tomogram.density_map)

    correlation = signal.fftconvolve(tomogram.density_map, templates[1][2].density_map, mode='same')

    fig, ax = plt.subplots()
    ax.imshow(correlation)

    positions = CandidateSelector.find_local_maxima(None, correlation)
    maximums = np.zeros(correlation.shape)
    for position in positions:
        maximums[position] = correlation[position]
    fig, ax = plt.subplots()
    print(len(positions))
    ax.imshow(maximums)

    #plt.show()
